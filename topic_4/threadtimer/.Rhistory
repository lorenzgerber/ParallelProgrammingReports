source("https://bioconductor.org/biocLite.R")
biocLite("tofsims")
library(tofsims)
source("https://bioconductor.org/biocLite.R")
biocLite("tofsims")
library(tofsims)
install.pakcages('ChemometricsWithRData')
install.packages('ChemometricsWithRData')
library(tofsims)
spectraImport<-MassSpectra(select='ulvacraw', analysisName='~/Downloads/012.raw')
plot(spectraImport, type='l')
spectraImport<-unitMassPeaks(objet=spectraImport, mzRange=c(1,250), widthAt=c(15, 181), factor=c(0.4, 0.6))
spectraImport<-unitMassPeaks(object=spectraImport, mzRange=c(1,250), widthAt=c(15, 181), factor=c(0.4, 0.6))
plot(spectraImport, mzRange=c(35, 45), type='l')
install.packages('RColorBrewer')
plot(spectraImport, mzRange=c(35, 45), type='l')
imageImport<-MassImage(select='ulvacrawpeaks', analysisName = '~/Downloads/012.raw', PeakListobj = 'spectraImport')
imageImport<-MassImage(select='ulvacrawpeaks', analysisName = '~/Downloads/012.raw', PeakListobj = spectraImport)
source("https://bioconductor.org/biocLite.R")
biocLite("BiocParallel")
imageImport<-MassImage(select='ulvacrawpeaks', analysisName = '~/Downloads/012.raw', PeakListobj = spectraImport)
image(imageImport, col=brewer.pal(9.'PuRd'))
image(imageImport, col=brewer.pal(9,'PuRd'))
library(RColorBrewer)
image(imageImport, col=brewer.pal(9,'PuRd'))
imageImport<-poissonScaling(imageImport)
image(imageImport, col=brewer.pal(9,'PuRd'))
imageImport<-MassImage(select='ulvacrawpeaks', analysisName = '~/Downloads/012.raw', PeakListobj = spectraImport)
imageImport
image(imageImport, col=brewer.pal(9,'PuRd'))
imageImport <- PCAnalysis(imageImport, nComp = 4)
par(mar=c(0,0,0,0), oma=c(0,0,0,0), mfrow=c(2,2))
for(iii in 1:4) image(analysis(imageImport, 1), comp=iii)
block <- function(i, n, p){
return ifelse(n%%p*ceiling(n/p)<i , floor(i/ceiling(n/p)),n%%p+floor((i-n%%p*ceiling(n/p))/floor(n%%p)))
}
block <- function(i, n, p){
return ifelse(n%%p*ceiling(n/p)<i , floor(i/ceiling(n/p)),n%%p+floor((i-n%%p*ceiling(n/p))/floor(n%%p)))
}
block <- function(i, n, p){
ifelse(n%%p*ceiling(n/p)<i , floor(i/ceiling(n/p)),n%%p+floor((i-n%%p*ceiling(n/p))/floor(n%%p)))
}
block <- function(i, n, p){
test <- ifelse(n%%p*ceiling(n/p)<i , floor(i/ceiling(n/p)),n%%p+floor((i-n%%p*ceiling(n/p))/floor(n%%p)))
return test
}
block <- function(i, n, p){
return(ifelse(n%%p*ceiling(n/p)<i , floor(i/ceiling(n/p)),n%%p+floor((i-n%%p*ceiling(n/p))/floor(n%%p))))
}
block(9,14,4)
block(1,14,4)
block(2,14,4)
block(3,14,4)
block(4,14,4)
block <- function(i, n, p){
return(ifelse(i<n%%p*ceiling(n/p) , floor(i/ceiling(n/p)),n%%p+floor((i-n%%p*ceiling(n/p))/floor(n%%p))))
}
block(4,14,4)
block(0,14,4)
block(10,14,4)
block(12,14,4)
tester<-function(i, n, p){
result<-ifelse(i<n%%p *ceiling(n/p),floor(i/ceiling(n/p)), n%%p + floor((i-n%%p*ceiling(n/p))/floor(n%%p)))
return(result)
}
tester(1, 10, 5)
tester(2, 10, 5)
tester<-function(i, n, p){
result<-ifelse(n%%p==0,100000,ifelse(i<n%%p *ceiling(n/p),floor(i/ceiling(n/p)), n%%p + floor((i-n%%p*ceiling(n/p))/floor(n%%p))))
return(result)
}
tester(2, 10, 5)
tester<-function(i, n, p){
result<-ifelse(n%%p==0,floor(i/n),ifelse(i<n%%p *ceiling(n/p),floor(i/ceiling(n/p)), n%%p + floor((i-n%%p*ceiling(n/p))/floor(n%%p))))
return(result)
}
tester(2, 10, 5)
tester(6, 10, 5)
tester(7, 10, 5)
tester(8, 10, 5)
tester<-function(i, n, p){
result<-ifelse(n%%p==0,floor(i/p),ifelse(i<n%%p *ceiling(n/p),floor(i/ceiling(n/p)), n%%p + floor((i-n%%p*ceiling(n/p))/floor(n%%p))))
return(result)
}
tester(6, 10, 5)
tester(5, 10, 5)
tester(4, 10, 5)
setwd("~/git/ParallelProgrammingReports/topic_4/physical_data_distri")
data_non<-read.csv("non_distr.txt", header=FALSE)
data_non
data_distr<-read.csv("distr.txt", header=FALSE)
data_distr
boxplot(data_non)
data<-data.frame("non"=data_non, "distr"=distr)
data<-data.frame("non"=data_non, "distr"=data_distr)
boxplot(data)
data
data<-data.frame(data_non, data_distr)
colnames(data)<-c("non_distributed","distributed")
data
boxplot(data)
boxplot(data, ylab="seconds")
setwd("~/git/ParallelProgrammingReports/topic_4/threadtimer")
data<-read.csv("test.txt", header=FALSE)
data<-read.csv("test.txt", header=FALSE)
data
?boxplot
colnames(data)<-c("threads", "runtimes")
dim(data)
data<-read.csv("test.txt", header=FALSE, sep=" ")
data
colnames(data)<-c("threads", "runtimes")
boxplot(runtimes~threads, data)
boxplot(runtimes~threads, data[-155,])
boxplot(runtimes~threads, data[-c(1,155),])
boxplot(runtimes~threads, data, ylab="time in seconds", xlab="n threads")
boxplot(runtimes~threads, data[-c(1,155),], ylab="time in seconds", xlab="n threads")
