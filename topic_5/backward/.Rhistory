source("https://bioconductor.org/biocLite.R")
biocLite("tofsims")
library(tofsims)
source("https://bioconductor.org/biocLite.R")
biocLite("tofsims")
library(tofsims)
install.pakcages('ChemometricsWithRData')
install.packages('ChemometricsWithRData')
library(tofsims)
spectraImport<-MassSpectra(select='ulvacraw', analysisName='~/Downloads/012.raw')
plot(spectraImport, type='l')
spectraImport<-unitMassPeaks(objet=spectraImport, mzRange=c(1,250), widthAt=c(15, 181), factor=c(0.4, 0.6))
spectraImport<-unitMassPeaks(object=spectraImport, mzRange=c(1,250), widthAt=c(15, 181), factor=c(0.4, 0.6))
plot(spectraImport, mzRange=c(35, 45), type='l')
install.packages('RColorBrewer')
plot(spectraImport, mzRange=c(35, 45), type='l')
imageImport<-MassImage(select='ulvacrawpeaks', analysisName = '~/Downloads/012.raw', PeakListobj = 'spectraImport')
imageImport<-MassImage(select='ulvacrawpeaks', analysisName = '~/Downloads/012.raw', PeakListobj = spectraImport)
source("https://bioconductor.org/biocLite.R")
biocLite("BiocParallel")
imageImport<-MassImage(select='ulvacrawpeaks', analysisName = '~/Downloads/012.raw', PeakListobj = spectraImport)
image(imageImport, col=brewer.pal(9.'PuRd'))
image(imageImport, col=brewer.pal(9,'PuRd'))
library(RColorBrewer)
image(imageImport, col=brewer.pal(9,'PuRd'))
imageImport<-poissonScaling(imageImport)
image(imageImport, col=brewer.pal(9,'PuRd'))
imageImport<-MassImage(select='ulvacrawpeaks', analysisName = '~/Downloads/012.raw', PeakListobj = spectraImport)
imageImport
image(imageImport, col=brewer.pal(9,'PuRd'))
imageImport <- PCAnalysis(imageImport, nComp = 4)
par(mar=c(0,0,0,0), oma=c(0,0,0,0), mfrow=c(2,2))
for(iii in 1:4) image(analysis(imageImport, 1), comp=iii)
block <- function(i, n, p){
return ifelse(n%%p*ceiling(n/p)<i , floor(i/ceiling(n/p)),n%%p+floor((i-n%%p*ceiling(n/p))/floor(n%%p)))
}
block <- function(i, n, p){
return ifelse(n%%p*ceiling(n/p)<i , floor(i/ceiling(n/p)),n%%p+floor((i-n%%p*ceiling(n/p))/floor(n%%p)))
}
block <- function(i, n, p){
ifelse(n%%p*ceiling(n/p)<i , floor(i/ceiling(n/p)),n%%p+floor((i-n%%p*ceiling(n/p))/floor(n%%p)))
}
block <- function(i, n, p){
test <- ifelse(n%%p*ceiling(n/p)<i , floor(i/ceiling(n/p)),n%%p+floor((i-n%%p*ceiling(n/p))/floor(n%%p)))
return test
}
block <- function(i, n, p){
return(ifelse(n%%p*ceiling(n/p)<i , floor(i/ceiling(n/p)),n%%p+floor((i-n%%p*ceiling(n/p))/floor(n%%p))))
}
block(9,14,4)
block(1,14,4)
block(2,14,4)
block(3,14,4)
block(4,14,4)
block <- function(i, n, p){
return(ifelse(i<n%%p*ceiling(n/p) , floor(i/ceiling(n/p)),n%%p+floor((i-n%%p*ceiling(n/p))/floor(n%%p))))
}
block(4,14,4)
block(0,14,4)
block(10,14,4)
block(12,14,4)
tester<-function(i, n, p){
result<-ifelse(i<n%%p *ceiling(n/p),floor(i/ceiling(n/p)), n%%p + floor((i-n%%p*ceiling(n/p))/floor(n%%p)))
return(result)
}
tester(1, 10, 5)
tester(2, 10, 5)
tester<-function(i, n, p){
result<-ifelse(n%%p==0,100000,ifelse(i<n%%p *ceiling(n/p),floor(i/ceiling(n/p)), n%%p + floor((i-n%%p*ceiling(n/p))/floor(n%%p))))
return(result)
}
tester(2, 10, 5)
tester<-function(i, n, p){
result<-ifelse(n%%p==0,floor(i/n),ifelse(i<n%%p *ceiling(n/p),floor(i/ceiling(n/p)), n%%p + floor((i-n%%p*ceiling(n/p))/floor(n%%p))))
return(result)
}
tester(2, 10, 5)
tester(6, 10, 5)
tester(7, 10, 5)
tester(8, 10, 5)
tester<-function(i, n, p){
result<-ifelse(n%%p==0,floor(i/p),ifelse(i<n%%p *ceiling(n/p),floor(i/ceiling(n/p)), n%%p + floor((i-n%%p*ceiling(n/p))/floor(n%%p))))
return(result)
}
tester(6, 10, 5)
tester(5, 10, 5)
tester(4, 10, 5)
setwd("~/git/ParallelProgrammingReports/topic_5/backward")
setwd("~/git/ParallelProgrammingReports/topic_5/backward")
data_auto<-read.csv("auto_series.txt", header=FALSE, sep=" ")
data_static_one<-read.csv("static_series_1x.txt", header=FALSE, sep=" ")
data_static<-read.csv("static_series_2x.txt", header=FALSE, sep=" ")
data_guided_one<-read.csv("guided_series_1x.txt", header=FALSE, sep=" ")
data_guided<-read.csv("guidced_series_2x.txt", header=FALSE, sep=" ")
data_dynamic_one<-read.csv("dynamic_series_1x.txt", header=FALSE, sep=" ")
data_dynamic<-read.csv("dynamic_series_2x.txt", header=FALSE, sep=" ")
setwd("~/git/ParallelProgrammingReports/topic_5/backward")
data_auto<-read.csv("auto_series.txt", header=FALSE, sep=" ")
data_static_one<-read.csv("static_series_1x.txt", header=FALSE, sep=" ")
data_static<-read.csv("static_series_2x.txt", header=FALSE, sep=" ")
data_guided_one<-read.csv("guided_series_1x.txt", header=FALSE, sep=" ")
data_guided<-read.csv("guided_series_2x.txt", header=FALSE, sep=" ")
data_dynamic_one<-read.csv("dynamic_series_1x.txt", header=FALSE, sep=" ")
data_dynamic<-read.csv("dynamic_series_2x.txt", header=FALSE, sep=" ")
data_static<-rbind(data_static_one, data_static)
data_guided<-rbind(data_guided_one, data_guided)
data_dynamic<-rbind(data_dynamic_one, data_dynamic)
colnames(data_static)<-c("chunk_size", "runtimes")
colnames(data_auto)<-c("chunk_size", "runtimes")
colnames(data_dynamic)<-c("chunk_size", "runtimes")
colnames(data_guided)<-c("chunk_size", "runtimes")
boxplot(runtimes~chunk_size, data_static, ylab="time in seconds", xlab="n chunk size")
View(data_auto)
data_auto2<-cbind(rep(0,10), data_auto[,2])
data_auto2
colnames(data_auto2)<-c("chunk_size", "runtimes")
boxplot(runtimes~chunk_size, data_dynamic, ylab="time in seconds", xlab="n chunk size")
boxplot(runtimes~chunk_size, data_guided, ylab="time in seconds", xlab="n chunk size")
boxplot(runtimes~chunk_size, data_auto, ylab="time in seconds", xlab="n chunk size")
data_static<-colbind(data_static, data_auto2)
data_dynamic<-colbind(data_dynamic, data_auto2)
data_guided<-colbind(data_guided, data_auto2)
data_static<-cbind(data_static, data_auto2)
data_dynamic<-cbind(data_dynamic, data_auto2)
data_guided<-cbind(data_guided, data_auto2)
boxplot(runtimes~chunk_size, data_static, ylab="time in seconds", xlab="n chunk size")
boxplot(runtimes~chunk_size, data_dynamic, ylab="time in seconds", xlab="n chunk size")
data_auto2
data_static
setwd("~/git/ParallelProgrammingReports/topic_5/backward")
data_auto<-read.csv("auto_series.txt", header=FALSE, sep=" ")
data_static_one<-read.csv("static_series_1x.txt", header=FALSE, sep=" ")
data_static<-read.csv("static_series_2x.txt", header=FALSE, sep=" ")
data_guided_one<-read.csv("guided_series_1x.txt", header=FALSE, sep=" ")
data_guided<-read.csv("guided_series_2x.txt", header=FALSE, sep=" ")
data_dynamic_one<-read.csv("dynamic_series_1x.txt", header=FALSE, sep=" ")
data_dynamic<-read.csv("dynamic_series_2x.txt", header=FALSE, sep=" ")
data_auto2<-cbind(rep(0,10), data_auto[,2])
data_static<-rbind(data_static_one, data_static)
data_guided<-rbind(data_guided_one, data_guided)
data_dynamic<-rbind(data_dynamic_one, data_dynamic)
colnames(data_static)<-c("chunk_size", "runtimes")
colnames(data_auto)<-c("chunk_size", "runtimes")
colnames(data_dynamic)<-c("chunk_size", "runtimes")
colnames(data_guided)<-c("chunk_size", "runtimes")
colnames(data_auto2)<-c("chunk_size", "runtimes")
data_static<-rbind(data_static, data_auto2)
data_dynamic<-rbind(data_dynamic, data_auto2)
data_guided<-rbind(data_guided, data_auto2)
boxplot(runtimes~chunk_size, data_static, ylab="time in seconds", xlab="n chunk size")
boxplot(runtimes~chunk_size, data_dynamic, ylab="time in seconds", xlab="n chunk size")
boxplot(runtimes~chunk_size, data_guided, ylab="time in seconds", xlab="n chunk size")
data_guided[which(data_guided[,1]==32),]
boxplot(runtimes~chunk_size, data_dynamic, ylab="time in seconds", xlab="n chunk size")
boxplot(runtimes~chunk_size, data_static, ylab="time in seconds", xlab="n chunk size")
best_guided<-data_guided[which(data_guided[,1]==32),]
best_dynamic<-data_dynamic[which(data_dynamic[,1]==128),]
best_static<-data_static[which(data_static[,1]==32),]
best_guided<-cbind(rep("guided",10), best_guided[,2])
best_dynamic<-cbind(rep("dynamic",10), best_dynamic[,2])
best_static<-cbind(rep("static",10), best_static[,2])
best_auto<-cbind(rep("auto", 10), data_auto2[,2])
total<-rbind(best_guided, best_dynamic)
total<-rbind(total, best_static)
total<-rbind(total, best_auto)
colnames(total)<-c("scheduling", "runtimes")
boxplot(runtimes~scheduling, total, ylab="time in seconds", xlab="type scheduling")
total
best_static
data_static
best_guided<-data_guided[which(data_guided[,1]==32),]
best_dynamic<-data_dynamic[which(data_dynamic[,1]==128),]
best_static<-data_static[which(data_static[,1]==32),]
best_guided
best_guided<-data.frame(rep("guided",10), best_guided[,2])
best_guided
best_guided<-data_guided[which(data_guided[,1]==32),]
best_dynamic<-data_dynamic[which(data_dynamic[,1]==128),]
best_static<-data_static[which(data_static[,1]==32),]
best_guided<-data.frame(rep("guided",10), best_guided[,2])
best_dynamic<-data.frame(rep("dynamic",10), best_dynamic[,2])
best_static<-data.frame(rep("static",10), best_static[,2])
best_auto<-data.frame(rep("auto", 10), data_auto2[,2])
total<-rbind(best_guided, best_dynamic)
total<-rbind(total, best_static)
total<-rbind(total, best_auto)
best_guided<-data.frame("scheduling"= rep("guided",10), "time"=best_guided[,2])
best_guided
best_guided<-data.frame("scheduling"= rep("guided",10), "time"=best_guided[,2])
best_dynamic<-data.frame("scheduling" = rep("dynamic",10), "time" = best_dynamic[,2])
total<-rbind(best_guided, best_dynamic)
total
boxplot(runtimes~scheduling, total, ylab="time in seconds", xlab="type scheduling")
best_guided<-data.frame("scheduling"= rep("guided",10), "runtimes"=best_guided[,2])
best_dynamic<-data.frame("scheduling" = rep("dynamic",10), "runtimes" = best_dynamic[,2])
best_static<-data.frame("scheduling" = rep("static",10), "runtimes" = best_static[,2])
best_auto<-data.frame("scheduling" = rep("auto", 10), "runtimes" = data_auto2[,2])
total<-rbind(best_guided, best_dynamic)
total<-rbind(total, best_static)
total<-rbind(total, best_auto)
boxplot(runtimes~scheduling, total, ylab="time in seconds", xlab="type scheduling")
par(mfcol=c(2,2))
boxplot(runtimes~chunk_size, data_static, ylab="time in seconds", xlab="n chunk size")
boxplot(runtimes~chunk_size, data_dynamic, ylab="time in seconds", xlab="n chunk size")
boxplot(runtimes~chunk_size, data_guided, ylab="time in seconds", xlab="n chunk size")
boxplot(runtimes~scheduling, total, ylab="time in seconds", xlab="type scheduling")
setwd("~/git/ParallelProgrammingReports/topic_5/backward")
data_auto<-read.csv("auto_series.txt", header=FALSE, sep=" ")
data_static_one<-read.csv("static_series_1x.txt", header=FALSE, sep=" ")
data_static<-read.csv("static_series_2x.txt", header=FALSE, sep=" ")
data_guided_one<-read.csv("guided_series_1x.txt", header=FALSE, sep=" ")
data_guided<-read.csv("guided_series_2x.txt", header=FALSE, sep=" ")
data_dynamic_one<-read.csv("dynamic_series_1x.txt", header=FALSE, sep=" ")
data_dynamic<-read.csv("dynamic_series_2x.txt", header=FALSE, sep=" ")
data_auto2<-cbind(rep(0,10), data_auto[,2])
data_static<-rbind(data_static_one, data_static)
data_guided<-rbind(data_guided_one, data_guided)
data_dynamic<-rbind(data_dynamic_one, data_dynamic)
colnames(data_static)<-c("chunk_size", "runtimes")
colnames(data_auto)<-c("chunk_size", "runtimes")
colnames(data_dynamic)<-c("chunk_size", "runtimes")
colnames(data_guided)<-c("chunk_size", "runtimes")
colnames(data_auto2)<-c("chunk_size", "runtimes")
boxplot(runtimes~chunk_size, data_static, ylab="time in seconds", xlab="n chunk size")
boxplot(runtimes~chunk_size, data_dynamic, ylab="time in seconds", xlab="n chunk size")
boxplot(runtimes~chunk_size, data_guided, ylab="time in seconds", xlab="n chunk size")
best_guided<-data_guided[which(data_guided[,1]==32),]
best_dynamic<-data_dynamic[which(data_dynamic[,1]==128),]
best_static<-data_static[which(data_static[,1]==32),]
best_guided<-data.frame("scheduling"= rep("guided",10), "runtimes"=best_guided[,2])
best_dynamic<-data.frame("scheduling" = rep("dynamic",10), "runtimes" = best_dynamic[,2])
best_static<-data.frame("scheduling" = rep("static",10), "runtimes" = best_static[,2])
best_auto<-data.frame("scheduling" = rep("auto", 10), "runtimes" = data_auto2[,2])
total<-rbind(best_guided, best_dynamic)
total<-rbind(total, best_static)
total<-rbind(total, best_auto)
boxplot(runtimes~scheduling, total, ylab="time in seconds", xlab="type scheduling")
boxplot(runtimes~chunk_size, data_static, ylab="time in seconds", xlab="n chunk size", main="static")
boxplot(runtimes~chunk_size, data_dynamic, ylab="time in seconds", xlab="n chunk size", main="dynamic")
boxplot(runtimes~chunk_size, data_guided, ylab="time in seconds", xlab="n chunk size", main="guided")
boxplot(runtimes~scheduling, total, ylab="time in seconds", xlab="type scheduling", main="total")
