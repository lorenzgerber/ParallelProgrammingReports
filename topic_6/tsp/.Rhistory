source("https://bioconductor.org/biocLite.R")
biocLite("tofsims")
library(tofsims)
source("https://bioconductor.org/biocLite.R")
biocLite("tofsims")
library(tofsims)
install.pakcages('ChemometricsWithRData')
install.packages('ChemometricsWithRData')
library(tofsims)
spectraImport<-MassSpectra(select='ulvacraw', analysisName='~/Downloads/012.raw')
plot(spectraImport, type='l')
spectraImport<-unitMassPeaks(objet=spectraImport, mzRange=c(1,250), widthAt=c(15, 181), factor=c(0.4, 0.6))
spectraImport<-unitMassPeaks(object=spectraImport, mzRange=c(1,250), widthAt=c(15, 181), factor=c(0.4, 0.6))
plot(spectraImport, mzRange=c(35, 45), type='l')
install.packages('RColorBrewer')
plot(spectraImport, mzRange=c(35, 45), type='l')
imageImport<-MassImage(select='ulvacrawpeaks', analysisName = '~/Downloads/012.raw', PeakListobj = 'spectraImport')
imageImport<-MassImage(select='ulvacrawpeaks', analysisName = '~/Downloads/012.raw', PeakListobj = spectraImport)
source("https://bioconductor.org/biocLite.R")
biocLite("BiocParallel")
imageImport<-MassImage(select='ulvacrawpeaks', analysisName = '~/Downloads/012.raw', PeakListobj = spectraImport)
image(imageImport, col=brewer.pal(9.'PuRd'))
image(imageImport, col=brewer.pal(9,'PuRd'))
library(RColorBrewer)
image(imageImport, col=brewer.pal(9,'PuRd'))
imageImport<-poissonScaling(imageImport)
image(imageImport, col=brewer.pal(9,'PuRd'))
imageImport<-MassImage(select='ulvacrawpeaks', analysisName = '~/Downloads/012.raw', PeakListobj = spectraImport)
imageImport
image(imageImport, col=brewer.pal(9,'PuRd'))
imageImport <- PCAnalysis(imageImport, nComp = 4)
par(mar=c(0,0,0,0), oma=c(0,0,0,0), mfrow=c(2,2))
for(iii in 1:4) image(analysis(imageImport, 1), comp=iii)
block <- function(i, n, p){
return ifelse(n%%p*ceiling(n/p)<i , floor(i/ceiling(n/p)),n%%p+floor((i-n%%p*ceiling(n/p))/floor(n%%p)))
}
block <- function(i, n, p){
return ifelse(n%%p*ceiling(n/p)<i , floor(i/ceiling(n/p)),n%%p+floor((i-n%%p*ceiling(n/p))/floor(n%%p)))
}
block <- function(i, n, p){
ifelse(n%%p*ceiling(n/p)<i , floor(i/ceiling(n/p)),n%%p+floor((i-n%%p*ceiling(n/p))/floor(n%%p)))
}
block <- function(i, n, p){
test <- ifelse(n%%p*ceiling(n/p)<i , floor(i/ceiling(n/p)),n%%p+floor((i-n%%p*ceiling(n/p))/floor(n%%p)))
return test
}
block <- function(i, n, p){
return(ifelse(n%%p*ceiling(n/p)<i , floor(i/ceiling(n/p)),n%%p+floor((i-n%%p*ceiling(n/p))/floor(n%%p))))
}
block(9,14,4)
block(1,14,4)
block(2,14,4)
block(3,14,4)
block(4,14,4)
block <- function(i, n, p){
return(ifelse(i<n%%p*ceiling(n/p) , floor(i/ceiling(n/p)),n%%p+floor((i-n%%p*ceiling(n/p))/floor(n%%p))))
}
block(4,14,4)
block(0,14,4)
block(10,14,4)
block(12,14,4)
tester<-function(i, n, p){
result<-ifelse(i<n%%p *ceiling(n/p),floor(i/ceiling(n/p)), n%%p + floor((i-n%%p*ceiling(n/p))/floor(n%%p)))
return(result)
}
tester(1, 10, 5)
tester(2, 10, 5)
tester<-function(i, n, p){
result<-ifelse(n%%p==0,100000,ifelse(i<n%%p *ceiling(n/p),floor(i/ceiling(n/p)), n%%p + floor((i-n%%p*ceiling(n/p))/floor(n%%p))))
return(result)
}
tester(2, 10, 5)
tester<-function(i, n, p){
result<-ifelse(n%%p==0,floor(i/n),ifelse(i<n%%p *ceiling(n/p),floor(i/ceiling(n/p)), n%%p + floor((i-n%%p*ceiling(n/p))/floor(n%%p))))
return(result)
}
tester(2, 10, 5)
tester(6, 10, 5)
tester(7, 10, 5)
tester(8, 10, 5)
tester<-function(i, n, p){
result<-ifelse(n%%p==0,floor(i/p),ifelse(i<n%%p *ceiling(n/p),floor(i/ceiling(n/p)), n%%p + floor((i-n%%p*ceiling(n/p))/floor(n%%p))))
return(result)
}
tester(6, 10, 5)
tester(5, 10, 5)
tester(4, 10, 5)
source("https://bioconductor.org/biocLite.R")
biocLite("xcms")
browseVignettes("xcms")
setwd("~/git/ParallelProgrammingReports/topic_6/tsp")
data<-read.csv("slurm-6340294.txt", header=FALSE, sep=" ")
data
raw_data<-read.csv("slurm-6340294.txt", header=FALSE, sep=" ")
data<-data.frame("dynamic"=raw_data[1:20,], "k2"=rawdata[21:40,], "cost"=raw_data[41:60,], "avg_cost"=raw_data[61:80])
data<-data.frame("dynamic"=raw_data[1:20,], "k2"=raw_data[21:40,], "cost"=raw_data[41:60,], "avg_cost"=raw_data[61:80])
data<-data.frame("dynamic"=raw_data[1:20,], "k2"=raw_data[21:40,], "cost"=raw_data[41:60,], "avg_cost"=raw_data[61:80,])
data
data<-data.frame("method"=c(rep("dyn",20), rep("k2", 20), rep("cost", 20), rep("avg_cost",20), "cores"=raw_data[,1], "runtime"=raw_data[,2])
data<-data.frame("method"=c(rep("dyn",20), rep("k2", 20), rep("cost", 20), rep("avg_cost",20)), "cores"=raw_data[,1], "runtime"=raw_data[,2])
data<-data.frame("dynamic"=raw_data[1:20,], "k2"=raw_data[21:40,], "cost"=raw_data[41:60,], "avg_cost"=raw_data[61:80,])
data
rm(data)
data<-data.frame("method"=c(rep("dyn",20), rep("k2", 20), rep("cost", 20), rep("avg_cost",20)), "cores"=raw_data[,1], "runtime"=raw_data[,2])
data
boxplot(data)
boxplot(runtime~cores, data= data[1:20,])
aggregate(data, by=list(cores, method), FUN=median)
aggregate(data, by=list(core, method), FUN=median)
data
tsp<-data
attach(tsp)
aggregate(tsp, by=list(cores, method), FUN=median)
tsp
tsp[,3]
tsp[,1]
mtcars
aggregate(tsp, by=list(cores), FUN=median)
aggregate(tsp, by=list(runtimes), FUN=median)
aggregate(tsp, by=list(runtime), FUN=median)
tsp
aggregate(tsp)
aggregate(tsp, FUN=median)
aggregate(tsp,by=cores FUN=median)
aggregate(tsp,by=list(cores) FUN=median)
aggregate(tsp,by=list(cores), FUN=median)
aggregate(tsp[,2:3],by=list(cores), FUN=median)
data<-data.frame("method"=c(rep(1,20), rep(2, 20), rep(3, 20), rep(4,20)), "cores"=raw_data[,1], "runtime"=raw_data[,2])
aggregate(tsp,by=list(cores, method) FUN=median)
aggregate(tsp,by=list(cores, method), FUN=median)
tsp<-data
aggregate(tsp,by=list(cores, method), FUN=median)
tsp
detach(tsp)
aggregate(tsp,by=list(cores, method), FUN=median)
attach(tsp)
aggregate(tsp,by=list(cores, method), FUN=median)
aggregate(tsp,by=list(method, cores), FUN=median)
