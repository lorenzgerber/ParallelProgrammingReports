source("https://bioconductor.org/biocLite.R")
biocLite("tofsims")
library(tofsims)
source("https://bioconductor.org/biocLite.R")
biocLite("tofsims")
library(tofsims)
install.pakcages('ChemometricsWithRData')
install.packages('ChemometricsWithRData')
library(tofsims)
spectraImport<-MassSpectra(select='ulvacraw', analysisName='~/Downloads/012.raw')
plot(spectraImport, type='l')
spectraImport<-unitMassPeaks(objet=spectraImport, mzRange=c(1,250), widthAt=c(15, 181), factor=c(0.4, 0.6))
spectraImport<-unitMassPeaks(object=spectraImport, mzRange=c(1,250), widthAt=c(15, 181), factor=c(0.4, 0.6))
plot(spectraImport, mzRange=c(35, 45), type='l')
install.packages('RColorBrewer')
plot(spectraImport, mzRange=c(35, 45), type='l')
imageImport<-MassImage(select='ulvacrawpeaks', analysisName = '~/Downloads/012.raw', PeakListobj = 'spectraImport')
imageImport<-MassImage(select='ulvacrawpeaks', analysisName = '~/Downloads/012.raw', PeakListobj = spectraImport)
source("https://bioconductor.org/biocLite.R")
biocLite("BiocParallel")
imageImport<-MassImage(select='ulvacrawpeaks', analysisName = '~/Downloads/012.raw', PeakListobj = spectraImport)
image(imageImport, col=brewer.pal(9.'PuRd'))
image(imageImport, col=brewer.pal(9,'PuRd'))
library(RColorBrewer)
image(imageImport, col=brewer.pal(9,'PuRd'))
imageImport<-poissonScaling(imageImport)
image(imageImport, col=brewer.pal(9,'PuRd'))
imageImport<-MassImage(select='ulvacrawpeaks', analysisName = '~/Downloads/012.raw', PeakListobj = spectraImport)
imageImport
image(imageImport, col=brewer.pal(9,'PuRd'))
imageImport <- PCAnalysis(imageImport, nComp = 4)
par(mar=c(0,0,0,0), oma=c(0,0,0,0), mfrow=c(2,2))
for(iii in 1:4) image(analysis(imageImport, 1), comp=iii)
block <- function(i, n, p){
return ifelse(n%%p*ceiling(n/p)<i , floor(i/ceiling(n/p)),n%%p+floor((i-n%%p*ceiling(n/p))/floor(n%%p)))
}
block <- function(i, n, p){
return ifelse(n%%p*ceiling(n/p)<i , floor(i/ceiling(n/p)),n%%p+floor((i-n%%p*ceiling(n/p))/floor(n%%p)))
}
block <- function(i, n, p){
ifelse(n%%p*ceiling(n/p)<i , floor(i/ceiling(n/p)),n%%p+floor((i-n%%p*ceiling(n/p))/floor(n%%p)))
}
block <- function(i, n, p){
test <- ifelse(n%%p*ceiling(n/p)<i , floor(i/ceiling(n/p)),n%%p+floor((i-n%%p*ceiling(n/p))/floor(n%%p)))
return test
}
block <- function(i, n, p){
return(ifelse(n%%p*ceiling(n/p)<i , floor(i/ceiling(n/p)),n%%p+floor((i-n%%p*ceiling(n/p))/floor(n%%p))))
}
block(9,14,4)
block(1,14,4)
block(2,14,4)
block(3,14,4)
block(4,14,4)
block <- function(i, n, p){
return(ifelse(i<n%%p*ceiling(n/p) , floor(i/ceiling(n/p)),n%%p+floor((i-n%%p*ceiling(n/p))/floor(n%%p))))
}
block(4,14,4)
block(0,14,4)
block(10,14,4)
block(12,14,4)
tester<-function(i, n, p){
result<-ifelse(i<n%%p *ceiling(n/p),floor(i/ceiling(n/p)), n%%p + floor((i-n%%p*ceiling(n/p))/floor(n%%p)))
return(result)
}
tester(1, 10, 5)
tester(2, 10, 5)
tester<-function(i, n, p){
result<-ifelse(n%%p==0,100000,ifelse(i<n%%p *ceiling(n/p),floor(i/ceiling(n/p)), n%%p + floor((i-n%%p*ceiling(n/p))/floor(n%%p))))
return(result)
}
tester(2, 10, 5)
tester<-function(i, n, p){
result<-ifelse(n%%p==0,floor(i/n),ifelse(i<n%%p *ceiling(n/p),floor(i/ceiling(n/p)), n%%p + floor((i-n%%p*ceiling(n/p))/floor(n%%p))))
return(result)
}
tester(2, 10, 5)
tester(6, 10, 5)
tester(7, 10, 5)
tester(8, 10, 5)
tester<-function(i, n, p){
result<-ifelse(n%%p==0,floor(i/p),ifelse(i<n%%p *ceiling(n/p),floor(i/ceiling(n/p)), n%%p + floor((i-n%%p*ceiling(n/p))/floor(n%%p))))
return(result)
}
tester(6, 10, 5)
tester(5, 10, 5)
tester(4, 10, 5)
source("https://bioconductor.org/biocLite.R")
biocLite("xcms")
browseVignettes("xcms")
setwd("~/git/ParallelProgrammingReports/topic_6/daxpy")
read.csv("slurm-6330834.txt", header=FALSE)
data<-read.csv("slurm-6330834.txt", header=FALSE)
data
data.frame("cores"=data[,1], "block"=data[which(data[,2]>1),3], "cycle"=data[which(data[,2]==1),3])
data<-read.csv("slurm-6330834.txt", header=FALSE, sep=" ")
data.frame("cores"=data[,1], "block"=data[which(data[,2]>1),3], "cycle"=data[which(data[,2]==1),3])
data.frame("cores"=data[1:40,1], "block"=data[which(data[,2]>1),3], "cycle"=data[which(data[,2]==1),3])
data_assembled<-data.frame("cores"=data[1:40,1], "block"=data[which(data[,2]>1),3], "cycle"=data[which(data[,2]==1),3])
plot(data_assembled)
plot(data_assembled[,2:3], data_assembled[,1])
plot(data_assembled[,1], data_assembled[,2:3])
plot(data_assembled[,1], data_assembled[,2])
plot(data_assembled[,1], data_assembled[,2], type='l')
plot(data_assembled[,1], data_assembled[,2])
point(data_assembled[,1], data_assembled[,3], col="blue")
points(data_assembled[,1], data_assembled[,3], col="blue")
boxplot(block~cores, data=data_assembled)
?boxplot
boxplot(cycle~cores, data=data_assembled, add=TRUE)
boxplot(block~cores, data=data_assembled, ylab=c(0.002, 0.03))
boxplot(cycle~cores, data=data_assembled, add=TRUE, col='red')
boxplot(block~cores, data=data_assembled, add=TRUE, col='blue')
boxplot(cores~cores, data=data_assembled, ylim=c(0.002, 0.03), col='red')
boxplot(cycle~cores, data=data_assembled, ylim=c(0.002, 0.03), col='red')
boxplot(block~cores, data=data_assembled, add=TRUE, col='blue')
legend(2,0.03, c(“block”,”cyclic”), lty=c(1,1), lwd=c(5,5),col=c(“blue”,”red”))
legend(2,0.03, c(“block”,”cyclic”), lty=c(1,1), lwd=c(5,5),col=c("blue","red"))
legend(2,0.03, c("block","cyclic"), lty=c(1,1), lwd=c(5,5),col=c("blue","red"))
legend(1,0.03, c("block","cyclic"), lty=c(1,1), lwd=c(5,5),col=c("blue","red"))
legend(0.5,0.03, c("block","cyclic"), lty=c(1,1), lwd=c(5,5),col=c("blue","red"))
legend(0.5,0.03, c("cyclic","block"), lty=c(1,1), lwd=c(5,5),col=c("red", "blue"))
setwd("~/git/ParallelProgrammingReports/topic_6/daxpy")
data<-read.csv("slurm-6330834.txt", header=FALSE, sep=" ")
data_assembled<-data.frame("cores"=data[1:40,1], "block"=data[which(data[,2]>1),3], "cycle"=data[which(data[,2]==1),3])
plot(data_assembled[,1], data_assembled[,2:3])
boxplot(cycle~cores, data=data_assembled, ylim=c(0.002, 0.03), col='red')
boxplot(block~cores, data=data_assembled, add=TRUE, col='blue')
legend(0.5,0.03, c("cyclic","block"), lty=c(1,1), lwd=c(5,5),col=c("red", "blue"))
setwd("~/git/ParallelProgrammingReports/topic_6/daxpy")
data<-read.csv("slurm-6330834.txt", header=FALSE, sep=" ")
data_assembled<-data.frame("cores"=data[1:40,1], "block"=data[which(data[,2]>1),3], "cycle"=data[which(data[,2]==1),3])
plot(data_assembled[,1], data_assembled[,2:3])
boxplot(cycle~cores, data=data_assembled, ylim=c(0.002, 0.03), col='red', xlab="cores", ylab="runtime")
boxplot(block~cores, data=data_assembled, add=TRUE, col='blue')
legend(0.5,0.03, c("cyclic","block"), lty=c(1,1), lwd=c(5,5),col=c("red", "blue"))
a<-c(65, 149, 263, 407, 581, 790, 1030)
b<-c(500, 750, 1000, 1250, 1500, 1750, 2000)
plot(a,b)
plot(b,a)
plot(b^2,a)
