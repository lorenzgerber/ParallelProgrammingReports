\documentclass[a4paper,11pt,twoside]{article}
%\documentclass[a4paper,11pt,twoside,se]{article}

\usepackage{UmUStudentReport}
\usepackage{verbatim}   % Multi-line comments using \begin{comment}
\usepackage{courier}    % Nicer fonts are used. (not necessary)
\usepackage{pslatex}    % Also nicer fonts. (not necessary)
\usepackage[pdftex]{graphicx}   % allows including pdf figures
\usepackage{listings}
\usepackage{pgf-umlcd}
\usepackage{blindtext}
\usepackage{enumitem}
\usepackage{amsmath}
\usepackage{amssymb}
%\usepackage{lmodern}   % Optional fonts. (not necessary)
%\usepackage{tabularx}
%\usepackage{microtype} % Provides some typographic improvements over default settings
%\usepackage{placeins}  % For aligning images with \FloatBarrier
%\usepackage{booktabs}  % For nice-looking tables
%\usepackage{titlesec}  % More granular control of sections.

% DOCUMENT INFO
% =============
\department{Department of Computing Science}
\coursename{Parallel Programming 7.5 p}
\coursecode{5DV152}
\title{Final Programming Assignment\\ MPI Game of Life}
\author{Lorenz Gerber ({\tt{dv15lgr@cs.umu.se}} {\tt{lozger03@student.umu.se}})}
\date{2017-03-22}
%\revisiondate{2016-01-18}
\instructor{Lars Karlsson / Mikael RÃ¤nner}


% DOCUMENT SETTINGS
% =================
\bibliographystyle{plain}
%\bibliographystyle{ieee}
\pagestyle{fancy}
\raggedbottom
\setcounter{secnumdepth}{2}
\setcounter{tocdepth}{2}
%\graphicspath{{images/}}   %Path for images

\usepackage{float}
\floatstyle{ruled}
\newfloat{listing}{thp}{lop}
\floatname{listing}{Listing}



% DEFINES
% =======
%\newcommand{\mycommand}{<latex code>}

% DOCUMENT
% ========
\begin{document}
\lstset{language=C}
\maketitle
\thispagestyle{empty}
\newpage
\tableofcontents
\thispagestyle{empty}
\newpage

\clearpage
\pagenumbering{arabic}

\section{Introduction}
Here it was the aim to design and implement conway's game of life that can be run on a High Performance Computing system using the MPI library. 
\section{Conway's Game of Life}
Conway simplified mathematical models from von Neuman that were about structures that could build copies of themselves. Published 1970, the surprising property of the program was that it represented a turing complete system despite using only very simple rules. It was the start of a new research field about `cellular automata'.

Conway's game of life is represented by a regular grid of limited size consisting of individual cells that can either be death or alive. The game of life proceeds in rounds: In each round the state of each cell is evaluated individually and then updated to an eventual new state. Then the next round starts. The most important feature of this system are the rules applied for assessing and updating the state of each individual cell: Based on the eight neighbouring cells, it is determined if a cells environment is life promoting or overcrowded. Hence, the variable to determine and evaluate is the number of neighbouring cells alive.       

\section{Design and Implementation}
From the description of the game itself, some preliminary design drafts were sketched. Then a short litterature study about available implementations was conducted. Several programs of interest were found and inspected for inspiration \cite{golRosetta} \cite{golKTH} \cite{golPetascale}. 
To be flexible, it was decided to implement both randomized game start state and loading of a saved state from file. Because graphics programming was not the focus of this course a simple script in R \cite{rlanguage} was written for visual inspection of the game state after a number of generations. 
`Foster's Methodology' as reproduced in the course litterature \cite[p. 66]{pacheco2011} was applied. 

\begin{enumerate}
\item Partitioning\\
Two task were identified: Detecting the number of neighbours alive and updating the state for the next round. However, as it will be seen later, in the current case, it could make more sense to see each single cell as an individual task.
\item Communication\\
The two first mentioned tasks above need to run in sequence and they also need to be concerted among the whole game. If a single cell is seen as an individual task, then the communication would be the step where the neighbouring cells alive are determined. The cell is locally dependent to access the eight surrounding cells. 
\item Agglomeration / Aggregation\\
Agglomerating the individual tasks per cell seems to make sense as they adhere to a strict temporal run sequence. However more interesting is to consider agglomerating larger numbers of individual cells. As most of the cells would have eight neighbours within the group, they could be considered to be independent with a few special cases for the cells on the interface/border. 
\item Mapping\\
As the identified tasks are tightly coupled, it seems to make most sense to map larger agglomerates of cells to individual MPI nodes. Hence, communication during the game will be limited to handling the mentioned special cases of cells that are at the border of a local cell group. 
\end{enumerate}

Practically, it was decided to divide the global square game of life field vertically into equal sized local rectangular fields of cells. As such, communication between nodes includes only the cells that are on the vertical borders as the horizontal borders (top and bottom) can be calculated locally. To facilitate the communication, the local rectangular cell groups are padded with one layer of cells where the cell state from other local border interface can be imported to.

Hence there were a total of three tasks per game cycle determined:
\begin{enumerate}
\item update interface region
\item determine number of neighbours alive
\item update state
\end{enumerate}


\section{Usage Instructions}
\subsection{Building}

\subsection{Usage}
\subsubsection{Running the Program}
\subsubsection{Graph Output using R Script}

\section{Validation}
Here the qualitative result of the serial and parallel version were evaluated to yield the same result. This was done using a batch script that runs both programs and then compares the output files using the system tool diff. 

\section{Benchmarking}

\section{Known Issues}

\addcontentsline{toc}{section}{\refname}
\bibliography{references}

\appendix
\section{C Source Code TSP Condways Game of Life}{\label{app:gol}}


\end{document}
